# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2019-present Shanti Gilbert (https://github.com/shantigilbert)
# Copyright (C) 2020-present Fewtarius

export PATH="$PATH:/usr/local/bin:/usr/bin:/storage/bin"

export SDL_GAMECONTROLLERCONFIG_FILE="/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt"

EE_DIR="/storage/.config/distribution"
EE_CONF="${EE_DIR}/configs/distribution.conf"
ES_CONF="/storage/.emulationstation/es_settings.cfg"
EE_DEVICE=$(cat /storage/.config/.OS_ARCH)
JSLISTENCONF="/storage/.config/distribution/configs/jslisten.cfg"

get_ee_setting() {
# Argument $1 is the setting name, EmuELEC settings alway start with ee_ e.g. ee_novideo
# Usage: get_ee_setting setting [platform] [rom]
# Only the setting argument is required
# Priority is: GAME, PLATFORM, GLOBAL, EE_SETTING if at any point one returns 0 it means its dissabled, if it returns empty it will continue onto the next one.

SETTING="${1}"
PLATFORM="${2}"
ROM="${3}"

#ROM
ROM=$(echo [\"${ROM}\"] | sed -e 's|\[|\\\[|g' | sed -e 's|\]|\\\]|g' | sed -e 's|(|\\\(|g' | sed -e 's|)|\\\)|g')
PAT="^${PLATFORM}${ROM}[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"

if [ -z "${EES}" ]; then
#PLATFORM
PAT="^${PLATFORM}[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

if [ -z "${EES}" ]; then
#GLOBAL
PAT="^global[.-]${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

if [ -z "${EES}" ]; then
#EE_SETTINGS
PAT="^${SETTING}=(.*)"
	EES=$(cat "${EE_CONF}" | grep -oE "${PAT}")
	EES="${EES##*=}"
fi

echo "${EES}"
}

set_ee_setting() {
# argument $1 is the setting name e.g. nes.integerscale. $2 is the value, e.g "1"
	sed -i "/$1=/d" "${EE_CONF}"
	[ $2 == "disable" ] || echo "${1}=${2}" >> "${EE_CONF}"
}

set_audio() {
  if [ "${1}" == "default" ]; then
    AUDIO="alsa"
  else
    AUDIO=${1}
  fi
  /usr/bin/rr_audio.sh ${AUDIO}
}

get_es_setting() {
	echo $(sed -n "s|\s*<${1} name=\"${2}\" value=\"\(.*\)\" />|\1|p" ${ES_CONF})
}

end_port() {
set_audio default

# for some reason head sometimes does not exit
killall head
}

set_perf() {
  OC_LOCK=1
  . /etc/clocklimits

  if [ -f /dev/shm/oc_unlock ]; then
    OC_LOCK=0
  fi

  if [[ "${EE_DEVICE}" =~ RG351 ]]; then
    GPUADDR="ff400000"
  elif [[ "${EE_DEVICE}" == RG552 ]]; then
    GPUADDR="ff9a0000"
  fi
  CPUGOV="${1}"
  GPURAMGOV="${2}"
  X_PLATFORM="${3}"
  X_ROM="${4}"
  F_CPU_LIMIT=""
  F_CPU_BIG_LIMIT=""
  F_GPU_LIMIT=""
  F_RAM_LIMIT=""
  # check for custom_performance mode
  CUSTOMPERF=$(get_ee_setting customperf "${X_PLATFORM}" "${X_ROM}")
  if [[ ${CUSTOMPERF} == "1" ]]; then
    # check for custom clock limits per system/game
    F_CPU_LIMIT=$(get_ee_setting cpuclock "${X_PLATFORM}" "${X_ROM}")
    F_CPU_BIG_LIMIT=$(get_ee_setting cpuclock_big "${X_PLATFORM}" "${X_ROM}")
    F_GPU_LIMIT=$(get_ee_setting gpuclock "${X_PLATFORM}" "${X_ROM}")
    F_RAM_LIMIT=$(get_ee_setting ramclock "${X_PLATFORM}" "${X_ROM}")
  fi

  if [ ${OC_LOCK} == 1 ] || [ ${CPUGOV} == "ondemand" ]; then
    # get default clock limits
    if [[ -z "${F_CPU_LIMIT}" ]]; then
      F_CPU_LIMIT=${CPU_LIMIT}
    fi
    if [[ -z "${F_CPU_BIG_LIMIT}" ]]; then
      F_CPU_BIG_LIMIT=${CPU_BIG_LIMIT}
    fi
    if [ -z "${F_GPU_LIMIT}" ]; then
      F_GPU_LIMIT=${GPU_LIMIT}
    fi
    if [ -z "${F_RAM_LIMIT}" ]; then
      F_RAM_LIMIT=${RAM_LIMIT}
    fi
  else
    # get oc clock limits
    if [ -z "${F_CPU_LIMIT}" ]; then
      F_CPU_LIMIT=${CPU_OC_LIMIT}
    fi
    if [ -z "${F_CPU_BIG_LIMIT}" ]; then
      F_CPU_BIG_LIMIT=${CPU_BIG_OC_LIMIT}
    fi
    if [ -z "${F_GPU_LIMIT}" ]; then
      F_GPU_LIMIT=${GPU_OC_LIMIT}
    fi
    if [ -z "${F_RAM_LIMIT}" ]; then
      F_RAM_LIMIT=${RAM_OC_LIMIT}
    fi
  fi

  if [ ${CPUGOV} == "ondemand" ]; then
    # get ondemand low values
    F_CPU_LOW=${CPU_DEMAND}
    F_CPU_BIG_LOW=${CPU_BIG_DEMAND}
    F_GPU_LOW=${GPU_DEMAND}
    F_RAM_LOW=${RAM_DEMAND}
  else
    # get ondemand low values
    F_CPU_LOW=${CPU_LOW}
    F_CPU_BIG_LOW=${CPU_BIG_LOW}
    F_GPU_LOW=${GPU_LOW}
    F_RAM_LOW=${RAM_LOW}
  fi

  # set governor for LITTLE CPU cores
  echo ${CPUGOV} | tee /sys/devices/system/cpu/cpufreq/policy0/scaling_governor >/dev/null 2>&1
  if [ -d /sys/devices/system/cpu/cpufreq/policy4 ]; then
    # set governor for BIG CPU cores
    echo ${CPUGOV} | tee /sys/devices/system/cpu/cpufreq/policy4/scaling_governor >/dev/null 2>&1
  fi
  # set governor for GPU
  echo ${GPURAMGOV} | tee /sys/devices/platform/${GPUADDR}.gpu/devfreq/${GPUADDR}.gpu/governor >/dev/null 2>&1
  # set governor for RAM
  echo ${GPURAMGOV} | tee /sys/devices/platform/dmc/devfreq/dmc/governor >/dev/null 2>&1

  # set min/max clock for LITTLE CPU cores
  echo ${F_CPU_LOW} | tee /sys/devices/system/cpu/cpufreq/policy0/scaling_min_freq >/dev/null 2>&1
  echo ${F_CPU_LIMIT} | tee /sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq >/dev/null 2>&1
  if [ -d /sys/devices/system/cpu/cpufreq/policy4 ]; then
    # set min/max clock for BIG CPU cores
    echo ${F_CPU_BIG_LOW} | tee /sys/devices/system/cpu/cpufreq/policy4/scaling_min_freq >/dev/null 2>&1
    echo ${F_CPU_BIG_LIMIT} | tee /sys/devices/system/cpu/cpufreq/policy4/scaling_max_freq >/dev/null 2>&1
  fi
  # set min/max clock for GPU
  echo ${F_GPU_LOW} | tee /sys/devices/platform/${GPUADDR}.gpu/devfreq/${GPUADDR}.gpu/min_freq >/dev/null 2>&1
  echo ${F_GPU_LIMIT} | tee /sys/devices/platform/${GPUADDR}.gpu/devfreq/${GPUADDR}.gpu/max_freq >/dev/null 2>&1
  # set min/max clock for RAM
  echo ${F_RAM_LOW} | tee /sys/devices/platform/dmc/devfreq/dmc/min_freq >/dev/null 2>&1
  echo ${F_RAM_LIMIT} | tee /sys/devices/platform/dmc/devfreq/dmc/max_freq >/dev/null 2>&1
}

set_cores() {
  MODE="${1}"
  Y_PLATFORM="${2}"
  Y_ROM="${3}"

  if [[ ${Y_PLATFORM} == "screensaver" ]] && [[ "${EE_DEVICE}" == RG552 ]]; then
    DISABLE_CORES_BIG="1"
    DISABLE_CORES="1"
    CORES="1 2 3"
    CORES_BIG=$(cat /sys/devices/system/cpu/cpufreq/policy4/related_cpus)
  elif [[ ${Y_PLATFORM} == "screensaver" ]] && [[ "${EE_DEVICE}" =~ RG351 ]]; then
    DISABLE_CORES_BIG="0"
    DISABLE_CORES="1"
    CORES="1 2 3"
    CORES_BIG=""
  # elif [[ ${Y_PLATFORM} == "emulationstation" ]] && [[ "${EE_DEVICE}" == RG552 ]]; then
    # DISABLE_CORES_BIG="1"
    # DISABLE_CORES="1"
    # CORES="2 3"
    # CORES_BIG=$(cat /sys/devices/system/cpu/cpufreq/policy4/related_cpus)
  # elif [[ ${Y_PLATFORM} == "emulationstation" ]] && [[ "${EE_DEVICE}" =~ RG351 ]]; then
    # DISABLE_CORES_BIG="0"
    # DISABLE_CORES="1"
    # CORES="2 3"
    # CORES_BIG=""
  elif [[ "${EE_DEVICE}" == RG552 ]]; then
    DISABLE_CORES_BIG=$(get_ee_setting disable_cores_big "${Y_PLATFORM}" "${Y_ROM}")
    DISABLE_CORES=$(get_ee_setting disable_cores "${Y_PLATFORM}" "${Y_ROM}")
    CORES=$(cat /sys/devices/system/cpu/cpufreq/policy0/related_cpus)
    CORES_BIG=$(cat /sys/devices/system/cpu/cpufreq/policy4/related_cpus)
  elif [[ "${EE_DEVICE}" =~ RG351 ]]; then
    DISABLE_CORES_BIG="0"
    DISABLE_CORES=$(get_ee_setting disable_cores "${Y_PLATFORM}" "${Y_ROM}")
    CORES="2 3"
    CORES_BIG=""
  fi

  case ${MODE} in
    enable)
      if [ ! -z "${CORES}" ]; then
        for CORE in ${CORES}; do
          echo 1 > /sys/devices/system/cpu/cpu${CORE}/online
        done
      fi
      if [ ! -z "${CORES_BIG}" ]; then
        for CORE in ${CORES_BIG}; do
          echo 1 > /sys/devices/system/cpu/cpu${CORE}/online
        done
      fi
    ;;
    disable)
      if [ ! -z "${CORES}" ]; then
        for CORE in ${CORES}; do
          if [[ "${DISABLE_CORES}" == "1" ]]; then
            echo 0 > /sys/devices/system/cpu/cpu${CORE}/online
          fi
        done
      fi
      if [ ! -z "${CORES_BIG}" ]; then
        for CORE in ${CORES_BIG}; do
          if [[ "${DISABLE_CORES_BIG}" == "1" ]]; then
            echo 0 > /sys/devices/system/cpu/cpu${CORE}/online
          fi
        done
      fi
    ;;
  esac
}

performance() {
  PLATFORM="${1}"
  ROM="${2}"
  set_cores "enable"
  set_perf "performance" "performance"
  set_cores "disable" "${PLATFORM}" "${ROM}"
  echo performance \"${PLATFORM}\" \"${ROM}\" > /tmp/powermode
}

ondemand() {
  PLATFORM="${1}"
  ROM="${2}"
  set_cores "enable"
  set_perf "ondemand" "dmc_ondemand"
  set_cores "disable" "${PLATFORM}" "${ROM}"
  echo ondemand \"${PLATFORM}\" \"${ROM}\" > /tmp/powermode
}

powersave() {
  PLATFORM="${1}"
  ROM="${2}"
  set_cores "enable"
  set_perf "powersave" "powersave"
  set_cores "disable" "${PLATFORM}" "${ROM}"
  echo powersave \"${PLATFORM}\" \"${ROM}\" > /tmp/powermode
}

custom_performance() {
  PLATFORM="${1}"
  ROM="${2}"
  set_cores "enable"
  set_perf "performance" "performance" "${PLATFORM}" "${ROM}"
  set_cores "disable" "${PLATFORM}" "${ROM}"
  echo custom_performance \"${PLATFORM}\" \"${ROM}\" > /tmp/powermode
}

### keep this for backwards compatibility
maxperf() {
  performance
}

normperf() {
  ondemand
}
###

ee_check_bios() {

PLATFORM="${1}"
CORE="${2}"
EMULATOR="${3}"
ROMNAME="${4}"
LOG="${5}"

if [[ -z "$LOG" ]]; then
	LOG="/tmp/logs/exec.log"
	cat /etc/motd > "$LOG"
fi

MISSINGBIOS="$(batocera-systems --strictfilter ${PLATFORM})"
if [ "$?" == "2" ]; then

# formating so it looks nice :)
PLATFORMNAME="${MISSINGBIOS##*>}"  # read from -P onwards
PLATFORMNAME="${PLATFORMNAME%%MISSING*}"  # until a space is found
PLATFORMNAME=$(echo $PLATFORMNAME | sed -e 's/\\n//g')

if [[ -f "${LOG}" ]]; then
echo "${CORE} ${EMULATOR} ${ROMNAME}" >> $LOG
echo "${PLATFORMNAME} missing BIOS - Could not find all BIOS: " >> $LOG
echo "please make sure you copied the files into the corresponding folder " >> $LOG
echo "${MISSINGBIOS}" >> $LOG
fi
	MISSINGBIOS=$(echo "$MISSINGBIOS" | sed -e 's/$/\\n/g')

	/usr/bin/error.sh "${PLATFORMNAME} missing BIOS" "Could not find all BIOS/files in /storage/roms, the game may not work:\n\n ${MISSINGBIOS}\n\nPlease make sure you copied the files into the corresponding folder."
	error_process="$!"
	pkill -P $error_process
fi
}

# read config files from /storage/.config/profile.d
  for config in /storage/.config/profile.d/*; do
    if [ -f "$config" ] ; then
      . $config
    fi
done

message_stream () {
  local MESSAGE=$1
  local DELAY=$2
  local LOADBUFFER=0
  local ANSI=0
  for (( i=0; i<${#MESSAGE}; i++ ))
  do
    CHAR="${MESSAGE:$i:1}"
    # Is this an escape character?
    if [ "${CHAR}" == "\\" ]
    then
      LOADBUFFER=1
      BUFFER="$BUFFER${CHAR}"
      continue
    fi

    # Is this ANSI? (\e[*[a-Z])
    if [ "${BUFFER}" == "\e[" ] && [ "${LOADBUFFER}" -eq 1 ]
    then
        ANSI=1
        BUFFER="$BUFFER${CHAR}"
        continue
    fi

    if [ "${LOADBUFFER}" -eq 1 ] && [ "${ANSI}" -eq 1 ]
    then
      # If it isn't ANSI it's a control char like \n
      if [[ "${CHAR}" =~ [a-Z] ]]
      then
        echo -ne "${BUFFER}${CHAR}" >/dev/console
        unset BUFFER
        LOADBUFFER=0
        ANSI=0
      fi
    else
      # otherwise it's text
      echo -ne "${BUFFER}${CHAR}" >/dev/console
      unset BUFFER
      LOADBUFFER=0
      ANSI=0
    fi
    sleep ${DELAY}
  done
}

spinny_cursor() {
  message_stream "$1" 0
  for (( c=0; c<=$2; c++ ))
  do
    echo -ne '\e[2D' '-' > /dev/console
    sleep .01
    echo -ne '\e[2D' '\\' > /dev/console
    sleep .01
    echo -ne '\e[2D' '|' > /dev/console
    sleep .01
    echo -ne '\e[2D' '/' > /dev/console
    sleep .01
  done
  echo -ne '\e[80D\e[K' > /dev/console
}

jslisten() {
	JSLISTENCONF="/storage/.config/distribution/configs/jslisten.cfg"
        if [ "$1" == "set" ]
        then
                systemctl stop jslisten

		if [ "${EE_DEVICE}" == "RG351MP" ] || [ "${EE_DEVICE}" == "RG552" ]; then

		cat <<EOF >${JSLISTENCONF}
[Generic]
program="/usr/bin/killall ${2}"
button1=6
button2=12
button3=13
ee_evdev="auto"

[BrightnessUp]
program="/usr/bin/brightness up"
button1=14
button2=5
ee_evdev="auto"

[BrightnessDown]
program="/usr/bin/brightness down"
button1=14
button2=4
ee_evdev="auto"

# Backup audio up (L3 + R2) as many RG351MP's have bad audio buttons
[AudioUp]
program="/usr/bin/odroidgoa_utils.sh vol +"
button1=14
button2=7
ee_evdev="auto"

# Backup audio down (L3 + L2) as many RG351MP's have bad audio buttons
[AudioDown]
program="/usr/bin/odroidgoa_utils.sh vol -"
button1=14
button2=6
ee_evdev="auto"

EOF

		else

		cat <<EOF >${JSLISTENCONF}
[Generic]
program="/usr/bin/killall ${2}"
button1=10
button2=7
button3=6
ee_evdev="auto"

[BrightnessUp]
program="/usr/bin/brightness up"
button1=8
button2=5
ee_evdev="auto"

[BrightnessDown]
program="/usr/bin/brightness down"
button1=8
button2=4
ee_evdev="auto"

# Backup audio up (L3 + R2) as many RG351V's have bad audio buttons
[AudioUp]
program="/usr/bin/odroidgoa_utils.sh vol +"
button1=8
button2=11
ee_evdev="auto"

# Backup audio down (L3 + L2) as many RG351V's have bad audio buttons
[AudioDown]
program="/usr/bin/odroidgoa_utils.sh vol -"
button1=8
button2=10
ee_evdev="auto"

EOF
		fi

                if [ "$2" == "mpv" ]
                then

			if [ "${EE_DEVICE}" == "RG351MP" ] || [ "${EE_DEVICE}" == "RG552" ]; then

			cat <<EOF >>${JSLISTENCONF}
[exit]
program="/usr/bin/manage_mpv.sh quit"
button1=12
button2=13

[Pause]
program="/usr/bin/manage_mpv.sh pause"
button1=1
ee_evdev="auto"

[Skip5s]
program="/usr/bin/manage_mpv.sh skip5s"
button1=5
ee_evdev="auto"

[Back5s]
program="/usr/bin/manage_mpv.sh back5s"
button1=4
ee_evdev="auto"

[Skip60s]
program="/usr/bin/manage_mpv.sh skip60s"
button1=12
button2=5
ee_evdev="auto"

[Back60s]
program="/usr/bin/manage_mpv.sh back60s"
button1=12
button2=4
ee_evdev="auto"

[Skip10m]
program="/usr/bin/manage_mpv.sh skip10m"
button1=13
button2=5
ee_evdev="auto"

[Back10m]
program="/usr/bin/manage_mpv.sh back10m"
button1=13
button2=4
ee_evdev="auto"

EOF

			else

			cat <<EOF >>${JSLISTENCONF}
[exit]
program="/usr/bin/manage_mpv.sh quit"
button1=7
button2=6

[Pause]
program="/usr/bin/manage_mpv.sh pause"
button1=0
ee_evdev="auto"

[Skip5s]
program="/usr/bin/manage_mpv.sh skip5s"
button1=5
ee_evdev="auto"

[Back5s]
program="/usr/bin/manage_mpv.sh back5s"
button1=4
ee_evdev="auto"

[Skip60s]
program="/usr/bin/manage_mpv.sh skip60s"
button1=7
button2=5
ee_evdev="auto"

[Back60s]
program="/usr/bin/manage_mpv.sh back60s"
button1=7
button2=4
ee_evdev="auto"

[Skip10m]
program="/usr/bin/manage_mpv.sh skip10m"
button1=6
button2=5
ee_evdev="auto"

[Back10m]
program="/usr/bin/manage_mpv.sh back10m"
button1=6
button2=4
ee_evdev="auto"

EOF
			fi
                fi
                systemctl start jslisten
        elif [ "$1" == "stop" ]
        then
                systemctl stop jslisten
        elif [ "$1" == "start" ]
        then
                systemctl start jslisten
        fi
}

init_port() {
  set_audio ${2}
}
